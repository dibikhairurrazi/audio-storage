// Code generated by MockGen. DO NOT EDIT.
// Source: ./module/audio-storage/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source ./module/audio-storage/repository/repository.go -destination module/audio-storage/test/mock/./module/audio-storage/repository/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/dibikhairurrazi/audio-storage/module/audio-storage/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindUser mocks base method.
func (m *MockUserRepository) FindUser(arg0 context.Context, arg1 int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserRepositoryMockRecorder) FindUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserRepository)(nil).FindUser), arg0, arg1)
}

// MockPhraseRepository is a mock of PhraseRepository interface.
type MockPhraseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhraseRepositoryMockRecorder
}

// MockPhraseRepositoryMockRecorder is the mock recorder for MockPhraseRepository.
type MockPhraseRepositoryMockRecorder struct {
	mock *MockPhraseRepository
}

// NewMockPhraseRepository creates a new mock instance.
func NewMockPhraseRepository(ctrl *gomock.Controller) *MockPhraseRepository {
	mock := &MockPhraseRepository{ctrl: ctrl}
	mock.recorder = &MockPhraseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhraseRepository) EXPECT() *MockPhraseRepositoryMockRecorder {
	return m.recorder
}

// CreateTx mocks base method.
func (m *MockPhraseRepository) CreateTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockPhraseRepositoryMockRecorder) CreateTx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockPhraseRepository)(nil).CreateTx), arg0)
}

// FindPhraseMetadata mocks base method.
func (m *MockPhraseRepository) FindPhraseMetadata(arg0 context.Context, arg1, arg2 int) (model.Phrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPhraseMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Phrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPhraseMetadata indicates an expected call of FindPhraseMetadata.
func (mr *MockPhraseRepositoryMockRecorder) FindPhraseMetadata(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPhraseMetadata", reflect.TypeOf((*MockPhraseRepository)(nil).FindPhraseMetadata), arg0, arg1, arg2)
}

// SavePhraseMetadata mocks base method.
func (m *MockPhraseRepository) SavePhraseMetadata(arg0 context.Context, arg1 model.Phrase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePhraseMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePhraseMetadata indicates an expected call of SavePhraseMetadata.
func (mr *MockPhraseRepositoryMockRecorder) SavePhraseMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePhraseMetadata", reflect.TypeOf((*MockPhraseRepository)(nil).SavePhraseMetadata), arg0, arg1)
}
